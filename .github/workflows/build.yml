name: Build and Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # Pobierz wszystkie tagi
    - name: Fetch all tags
      run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    # Instalacja wymaganych pakietów
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          debhelper devscripts build-essential \
          debconf nodejs npm sqlite3 \
          musl-tools libpam0g-dev git \
          nlohmann-json3-dev g++

    # Instalacja biblioteki JSON jeśli potrzebna
    - name: Install nlohmann/json library
      run: |
        sudo mkdir -p /usr/include/nlohmann
        sudo wget https://github.com/nlohmann/json/releases/download/v3.11.2/json.hpp -O /usr/include/nlohmann/json.hpp

    # Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'

    # Kompilacja nas-webdav
    - name: Compile nas-webdav
      run: |
        mkdir -p debian/nas-panel/usr/local/bin
        g++ -std=c++17 -O2 debian/nas-webdav.cpp -o debian/nas-panel/usr/local/bin/nas-webdav -I/usr/include/nlohmann

    # Pobierz wersję z changelog
    - name: Get changelog version
      id: changelog-version
      run: |
        CURRENT_VERSION=$(head -1 debian/changelog | awk -F'[()]' '{print $2}')
        echo "changelog_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

    # Pobierz ostatnią wersję z tagów
    - name: Get latest release version
      id: latest-release
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        LATEST_VERSION=${LATEST_TAG#v}
        echo "latest_version=$LATEST_VERSION" >> $GITHUB_OUTPUT

    # Porównaj wersje
    - name: Determine release version
      id: release-version
      run: |
        CHANGELOG_VERSION=${{ steps.changelog-version.outputs.changelog_version }}
        LATEST_VERSION=${{ steps.latest-release.outputs.latest_version }}
        
        if [ "$(printf '%s\n' "$CHANGELOG_VERSION" "$LATEST_VERSION" | sort -V | tail -n1)" == "$LATEST_VERSION" ]; then
          echo "skip_release=true" >> $GITHUB_OUTPUT
          echo "release_version=$CHANGELOG_VERSION" >> $GITHUB_OUTPUT
        else
          echo "skip_release=false" >> $GITHUB_OUTPUT
          echo "release_version=$CHANGELOG_VERSION" >> $GITHUB_OUTPUT
        fi

    # Build Node.js projektu
    - name: Install npm dependencies
      if: steps.release-version.outputs.skip_release == 'false'
      working-directory: ./backend
      run: npm ci

    - name: Build project
      if: steps.release-version.outputs.skip_release == 'false'
      working-directory: ./backend
      run: npm run build

    # Fix dla musl lib
    - name: Fix musl lib symlink
      if: steps.release-version.outputs.skip_release == 'false'
      run: |
        sudo mkdir -p /lib
        sudo ln -sf /usr/lib/x86_64-linux-musl/libc.so /lib/libc.musl-x86_64.so.1 || true

    # Budowanie pakietu deb
    - name: Build Debian package
      if: steps.release-version.outputs.skip_release == 'false'
      run: |
        mkdir -p debian/nas-panel/usr/lib
        dpkg-buildpackage -us -uc -b
        mkdir artifacts
        mv ../nas-panel_*.deb artifacts/

    # Tworzenie release
    - name: Create Release
      if: github.ref == 'refs/heads/main' && steps.release-version.outputs.skip_release == 'false'
      uses: softprops/action-gh-release@v1
      with:
        name: Version ${{ steps.release-version.outputs.release_version }}
        tag_name: v${{ steps.release-version.outputs.release_version }}
        body: |
          Automated release for version ${{ steps.release-version.outputs.release_version }}
          Changes:
          $(awk '/\*/{flag=1;next}/--/{flag=0}flag' debian/changelog | head -n -1)
        files: |
          artifacts/*.deb
        draft: false
        prerelease: false
